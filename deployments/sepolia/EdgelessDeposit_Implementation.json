{
  "address": "0x1a42B09bF9232461e44226ad316cd146343Acf26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxMintExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "EthAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintWrappedEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedStakingManagerWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "autoBridge",
          "type": "bool"
        }
      ],
      "name": "SetAutoBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Inbox",
          "name": "l1standardBridge",
          "type": "address"
        }
      ],
      "name": "SetL1StandardBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Eth",
          "type": "address"
        }
      ],
      "name": "SetL2Eth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "EthAmountWithdrew",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawEth",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoBridge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Inbox",
          "name": "_l1standardBridge",
          "type": "address"
        },
        {
          "internalType": "contract StakingManager",
          "name": "_stakingManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1standardBridge",
      "outputs": [
        {
          "internalType": "contract IERC20Inbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Eth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintEthBasedOnStakedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_autoBridge",
          "type": "bool"
        }
      ],
      "name": "setAutoBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Inbox",
          "name": "_l1standardBridge",
          "type": "address"
        }
      ],
      "name": "setL1StandardBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Eth",
          "type": "address"
        }
      ],
      "name": "setL2Eth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingManager",
      "outputs": [
        {
          "internalType": "contract StakingManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedEth",
      "outputs": [
        {
          "internalType": "contract WrappedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe926962f765444d8cc0297671ef81e238751468188e045513b302d532173a270",
  "receipt": {
    "to": null,
    "from": "0x45389224caF19e6d4c5424d6Aa441D5119b501Df",
    "contractAddress": "0x1a42B09bF9232461e44226ad316cd146343Acf26",
    "transactionIndex": 75,
    "gasUsed": "2047147",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa3e3112d1ff67a340022d730f399a2d40801214bbb0f74c70378ac857a48396c",
    "transactionHash": "0xe926962f765444d8cc0297671ef81e238751468188e045513b302d532173a270",
    "logs": [],
    "blockNumber": 5412022,
    "cumulativeGasUsed": "11267220",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "128f5ce8bbc4a1bd2bd3a13ebc884e10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxMintExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintWrappedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedStakingManagerWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoBridge\",\"type\":\"bool\"}],\"name\":\"SetAutoBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Inbox\",\"name\":\"l1standardBridge\",\"type\":\"address\"}],\"name\":\"SetL1StandardBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Eth\",\"type\":\"address\"}],\"name\":\"SetL2Eth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthAmountWithdrew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBridge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Inbox\",\"name\":\"_l1standardBridge\",\"type\":\"address\"},{\"internalType\":\"contract StakingManager\",\"name\":\"_stakingManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1standardBridge\",\"outputs\":[{\"internalType\":\"contract IERC20Inbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintEthBasedOnStakedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoBridge\",\"type\":\"bool\"}],\"name\":\"setAutoBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Inbox\",\"name\":\"_l1standardBridge\",\"type\":\"address\"}],\"name\":\"setL1StandardBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Eth\",\"type\":\"address\"}],\"name\":\"setL2Eth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingManager\",\"outputs\":[{\"internalType\":\"contract StakingManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedEth\",\"outputs\":[{\"internalType\":\"contract WrappedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"depositEth(address)\":{\"params\":{\"to\":\"Address to mint wrapped tokens to\"}},\"mintEthBasedOnStakedAmount(address,uint256)\":{\"details\":\"The owner can only mint up to the amount of Eth deposited + Eth staking rewards from Lido\",\"params\":{\"amount\":\"Amount of wrapped tokens to mint\",\"to\":\"Address to mint wrapped tokens to\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAutoBridge(bool)\":{\"params\":{\"_autoBridge\":\"True to pause autobridging, false to unpause\"}},\"setL1StandardBridge(address)\":{\"params\":{\"_l1standardBridge\":\"Address of the L1StandardBridge contract\"}},\"setL2Eth(address)\":{\"params\":{\"_l2Eth\":\"Address of the L2 Wrapped Eth contract\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawEth(address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Address to withdraw Eth to\"}}},\"title\":\"EdgelessDeposit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositEth(address)\":{\"notice\":\"Deposit Eth, mint wrapped tokens, and bridge to the Edgeless L2\"},\"mintEthBasedOnStakedAmount(address,uint256)\":{\"notice\":\"Mint wrapped tokens based on the amount of Eth staked\"},\"setAutoBridge(bool)\":{\"notice\":\"Pause autobridging of wrapped tokens to the Edgeless L2\"},\"setL1StandardBridge(address)\":{\"notice\":\"Set the address of the L1StandardBridge contract\"},\"setL2Eth(address)\":{\"notice\":\"Set the address of the L2 Wrapped Eth contract\"},\"withdrawEth(address,uint256)\":{\"notice\":\"Withdraw Eth from the Eth pool\"}},\"notice\":\"EdgelessDeposit is a contract that allows users to deposit Eth and receive wrapped tokens in return. The wrapped tokens can be used to bridge to the Edgeless L2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/EdgelessDeposit.sol\":\"EdgelessDeposit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { ILido } from \\\"./interfaces/ILido.sol\\\";\\nimport { IWithdrawalQueueERC721 } from \\\"./interfaces/IWithdrawalQueueERC721.sol\\\";\\n\\nILido constant LIDO = ILido(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\nIWithdrawalQueueERC721 constant LIDO_WITHDRAWAL_ERC721 =\\n    IWithdrawalQueueERC721(0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1);\\n\\n// Sepolia\\n// ILido constant LIDO = ILido(0x3e3FE7dBc6B4C189E7128855dD526361c49b40Af);\\n// IWithdrawalQueueERC721 constant LIDO_WITHDRAWAL_ERC721 =\\n//     IWithdrawalQueueERC721(0x1583C7b3f4C3B008720E6BcE5726336b0aB25fdd);\\n\",\"keccak256\":\"0xe900a5a920181ffbd99003de48e434a2f9f1c5095ee1e946319ad8bc38e73d66\",\"license\":\"UNLICENSED\"},\"src/EdgelessDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { LIDO } from \\\"./Constants.sol\\\";\\nimport { IERC20Inbox } from \\\"./interfaces/IERC20Inbox.sol\\\";\\nimport { StakingManager } from \\\"./StakingManager.sol\\\";\\nimport { WrappedToken } from \\\"./WrappedToken.sol\\\";\\n\\n/**\\n * @title EdgelessDeposit\\n * @notice EdgelessDeposit is a contract that allows users to deposit Eth and\\n * receive wrapped tokens in return. The wrapped tokens can be used to bridge to the Edgeless L2\\n */\\ncontract EdgelessDeposit is Ownable2StepUpgradeable, UUPSUpgradeable {\\n    bool public autoBridge;\\n    address public l2Eth;\\n    WrappedToken public wrappedEth;\\n    IERC20Inbox public l1standardBridge;\\n    StakingManager public stakingManager;\\n    uint256[50] private __gap;\\n\\n    event DepositEth(address indexed to, address indexed from, uint256 EthAmount, uint256 mintAmount);\\n    event MintWrappedEth(address indexed to, uint256 amount);\\n    event SetAutoBridge(bool autoBridge);\\n    event ReceivedStakingManagerWithdrawal(uint256 amount);\\n    event SetL1StandardBridge(IERC20Inbox l1standardBridge);\\n    event SetL2Eth(address l2Eth);\\n    event WithdrawEth(address indexed from, address indexed to, uint256 EthAmountWithdrew, uint256 burnAmount);\\n    event BridgeToL2(uint256 amount);\\n\\n    error MaxMintExceeded();\\n    error TransferFailed(bytes data);\\n    error ZeroAddress();\\n\\n    function initialize(\\n        address _owner,\\n        IERC20Inbox _l1standardBridge,\\n        StakingManager _stakingManager\\n    )\\n        external\\n        initializer\\n    {\\n        if (address(_l1standardBridge) == address(0) || _owner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        wrappedEth = new WrappedToken(address(this), \\\"Edgeless Wrapped Eth\\\", \\\"ewEth\\\");\\n        l1standardBridge = _l1standardBridge;\\n        autoBridge = false;\\n        stakingManager = _stakingManager;\\n        __Ownable_init_unchained(_owner);\\n    }\\n\\n    /// -------------------------------- \\ud83d\\udcdd External Functions \\ud83d\\udcdd --------------------------------\\n    receive() external payable {\\n        if (msg.sender == address(stakingManager)) {\\n            emit ReceivedStakingManagerWithdrawal(msg.value);\\n        } else {\\n            depositEth(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit Eth, mint wrapped tokens, and bridge to the Edgeless L2\\n     * @param to Address to mint wrapped tokens to\\n     */\\n    function depositEth(address to) public payable {\\n        uint256 amount = msg.value;\\n        _mintWrappedEth(to, amount);\\n        stakingManager.stake{ value: amount }(stakingManager.ETH_ADDRESS(), amount);\\n        _bridgeToL2(wrappedEth, amount);\\n        emit DepositEth(to, msg.sender, msg.value, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw Eth from the Eth pool\\n     * @param to Address to withdraw Eth to\\n     * @param amount  Amount to withdraw\\n     */\\n    function withdrawEth(address to, uint256 amount) external {\\n        wrappedEth.burn(msg.sender, amount);\\n        stakingManager.withdraw(amount);\\n        (bool success, bytes memory data) = to.call{ value: amount }(\\\"\\\");\\n        if (!success) revert TransferFailed(data);\\n        emit WithdrawEth(msg.sender, to, amount, amount);\\n    }\\n\\n    /// ---------------------------------- \\ud83d\\udd13 Admin Functions \\ud83d\\udd13 ----------------------------------\\n    /**\\n     * @notice Set the address of the L1StandardBridge contract\\n     * @param _l1standardBridge Address of the L1StandardBridge contract\\n     */\\n    function setL1StandardBridge(IERC20Inbox _l1standardBridge) external onlyOwner {\\n        l1standardBridge = _l1standardBridge;\\n        emit SetL1StandardBridge(_l1standardBridge);\\n    }\\n\\n    /**\\n     * @notice Set the address of the L2 Wrapped Eth contract\\n     * @param _l2Eth Address of the L2 Wrapped Eth contract\\n     */\\n    function setL2Eth(address _l2Eth) external onlyOwner {\\n        l2Eth = _l2Eth;\\n        emit SetL2Eth(_l2Eth);\\n    }\\n\\n    /**\\n     * @notice Pause autobridging of wrapped tokens to the Edgeless L2\\n     * @param _autoBridge True to pause autobridging, false to unpause\\n     */\\n    function setAutoBridge(bool _autoBridge) external onlyOwner {\\n        autoBridge = _autoBridge;\\n        emit SetAutoBridge(_autoBridge);\\n    }\\n\\n    /**\\n     * @notice Mint wrapped tokens based on the amount of Eth staked\\n     * @dev The owner can only mint up to the amount of Eth deposited + Eth staking rewards from Lido\\n     * @param to Address to mint wrapped tokens to\\n     * @param amount Amount of wrapped tokens to mint\\n     */\\n    function mintEthBasedOnStakedAmount(address to, uint256 amount) external onlyOwner {\\n        uint256 maxMint = stakingManager.getAssetTotal(stakingManager.ETH_ADDRESS()) - wrappedEth.totalSupply();\\n        if (maxMint < amount) revert MaxMintExceeded();\\n        wrappedEth.mint(to, amount);\\n        emit MintWrappedEth(to, amount);\\n    }\\n\\n    /// -------------------------------- \\ud83c\\udfd7\\ufe0f Internal Functions \\ud83c\\udfd7\\ufe0f --------------------------------\\n    function _bridgeToL2(WrappedToken wrappedToken, uint256 amount) internal {\\n        if (autoBridge) {\\n            wrappedToken.approve(address(l1standardBridge), amount);\\n            l1standardBridge.depositERC20(amount);\\n            emit BridgeToL2(amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev If autobridge, we mint thhe wrapped token to this contract so we can transfer it from '\\n     * this contract to the l1standardbridge contract. Otherwise, we mint it to the user\\n     */\\n    function _mintWrappedEth(address to, uint256 amount) internal {\\n        if (autoBridge) {\\n            wrappedEth.mint(address(this), amount);\\n        } else {\\n            wrappedEth.mint(to, amount);\\n        }\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x2d16d3527dd3f79b5b7384aa2084a7723986f899c3049e69f1cf2ee299706e02\",\"license\":\"UNLICENSED\"},\"src/StakingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IStakingStrategy } from \\\"./interfaces/IStakingStrategy.sol\\\";\\n\\n/**\\n * @notice The purpose of this contract is solely to take in assets and send them to strategies.\\n * Upon withdrawal, all assets go to the depositor. The depositor needs to be set after deployment\\n */\\ncontract StakingManager is Ownable2StepUpgradeable, UUPSUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => IStakingStrategy[]) public strategies;\\n    mapping(address => uint256) public activeStrategyIndex;\\n    address public staker;\\n    address public depositor;\\n    bool public autoStake;\\n    address public constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    uint256[50] private __gap;\\n\\n    event Stake(address indexed asset, uint256 amount);\\n    event Withdraw(address indexed asset, uint256 amount);\\n    event SetStaker(address staker);\\n    event SetAutoStake(bool autoStake);\\n    event AddStrategy(address indexed asset, IStakingStrategy indexed strategy);\\n    event SetActiveStrategy(address indexed asset, uint256 index);\\n    event RemoveStrategy(address indexed asset, IStakingStrategy indexed strategy, uint256 withdrawnAmount);\\n\\n    error OnlyStaker(address sender);\\n    error TransferFailed(bytes data);\\n\\n    modifier onlyStaker() {\\n        if (msg.sender != staker) {\\n            revert OnlyStaker(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    function initialize(address _owner) external initializer {\\n        __Ownable_init(_owner);\\n    }\\n\\n    /// -------------------------------- \\ud83d\\udcdd Staker Functions \\ud83d\\udcdd --------------------------------\\n    function stake(address asset, uint256 amount) external payable onlyStaker {\\n        _stakeEth(msg.value);\\n        emit Stake(asset, amount);\\n    }\\n\\n    function _stakeEth(uint256 amount) internal {\\n        IStakingStrategy strategy = getActiveStrategy(ETH_ADDRESS);\\n        strategy.deposit{ value: amount }(amount);\\n    }\\n\\n    function withdraw(uint256 amount) external onlyStaker {\\n        _withdrawEth(amount);\\n    }\\n\\n    function _withdrawEth(uint256 amount) internal {\\n        IStakingStrategy strategy = getActiveStrategy(ETH_ADDRESS);\\n        uint256 withdrawnAmount;\\n        if (address(strategy) != address(0)) {\\n            withdrawnAmount = strategy.withdraw(amount);\\n        } else {\\n            withdrawnAmount = amount > address(this).balance ? address(this).balance : amount;\\n        }\\n        (bool success, bytes memory data) = staker.call{ value: withdrawnAmount }(\\\"\\\");\\n        if (!success) revert TransferFailed(data);\\n        emit Withdraw(ETH_ADDRESS, amount);\\n    }\\n\\n    /// ---------------------------------- \\ud83d\\udd13 Admin Functions \\ud83d\\udd13 ----------------------------------\\n    function setStaker(address _staker) external onlyOwner {\\n        staker = _staker;\\n        emit SetStaker(_staker);\\n    }\\n\\n    function setAutoStake(bool _autoStake) external onlyOwner {\\n        autoStake = _autoStake;\\n        emit SetAutoStake(_autoStake);\\n    }\\n\\n    function addStrategy(address asset, IStakingStrategy strategy) external onlyOwner {\\n        strategies[asset].push(strategy);\\n        emit AddStrategy(asset, strategy);\\n    }\\n\\n    function setActiveStrategy(address asset, uint256 index) external onlyOwner {\\n        activeStrategyIndex[asset] = index;\\n        emit SetActiveStrategy(asset, index);\\n    }\\n\\n    function removeStrategy(address asset, uint256 index) external onlyOwner {\\n        IStakingStrategy strategy = strategies[asset][index];\\n        uint256 withdrawnAmount = strategy.withdraw(strategy.underlyingAssetAmount());\\n        uint256 lastIndex = strategies[asset].length - 1;\\n        strategies[asset][index] = strategies[asset][lastIndex];\\n        strategies[asset].pop();\\n        if (activeStrategyIndex[asset] == index) {\\n            activeStrategyIndex[asset] = 0;\\n        }\\n        emit RemoveStrategy(asset, strategy, withdrawnAmount);\\n    }\\n\\n    /// --------------------------------- \\ud83d\\udd0e View Functions \\ud83d\\udd0d ---------------------------------\\n    function getActiveStrategy(address asset) public view returns (IStakingStrategy) {\\n        return strategies[asset][activeStrategyIndex[asset]];\\n    }\\n\\n    function getAssetTotal(address asset) external view returns (uint256 total) {\\n        for (uint256 i = 0; i < strategies[asset].length; i++) {\\n            IStakingStrategy strategy = strategies[asset][i];\\n            total += strategy.underlyingAssetAmount();\\n        }\\n    }\\n\\n    receive() external payable { }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0xb8e758e0a1efd72f2c31d06b8fd7e8a8add4042736e373ff61e0fe64b89b5059\",\"license\":\"UNLICENSED\"},\"src/WrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title WrappedToken\\n * @notice This represents the wrapped tokens that are bridged to the Edgeless L2\\n */\\ncontract WrappedToken is ERC20 {\\n    address public minter;\\n\\n    event Mint(address indexed account, uint256 amount);\\n    event Burn(address indexed account, uint256 amount);\\n\\n    error SenderIsNotMinter();\\n\\n    modifier onlyMinter() {\\n        if (msg.sender != minter) revert SenderIsNotMinter();\\n        _;\\n    }\\n\\n    /**\\n     * @notice The owner of WrappedToken is the EdgelessDeposit contract\\n     * @param _minter The address of the minter - this should be the EdgelessDeposit contract\\n     */\\n    constructor(address _minter, string memory name, string memory symbol) ERC20(name, symbol) {\\n        minter = _minter;\\n    }\\n\\n    /**\\n     * @notice Only the EdgelessDeposit contract can mint wrapped tokens\\n     */\\n    function mint(address account, uint256 amount) external onlyMinter {\\n        _mint(account, amount);\\n        emit Mint(account, amount);\\n    }\\n\\n    /**\\n     * @notice Only the EdgelessDeposit contract can burn wrapped tokens\\n     */\\n    function burn(address account, uint256 amount) external onlyMinter {\\n        _burn(account, amount);\\n        emit Burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x84b81a49dd49601f175938632c09467254ec376438e92e1fcadde3eefc1b4dc8\",\"license\":\"UNLICENSED\"},\"src/interfaces/IERC20Inbox.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface IERC20Inbox {\\n    function depositERC20(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc8e5c35e1bee5423b52557d99612b0dbdbf33d24bb67a01c35c6f15aa8d38773\",\"license\":\"UNLICENSED\"},\"src/interfaces/ILido.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ILido is IERC20, IERC20Permit {\\n    function submit(address referralUser) external payable;\\n}\\n\",\"keccak256\":\"0x78f6189a2cda4cc76c26ab42d3d22eeafc6bd8297187f24a28ae26cd9da499f3\",\"license\":\"UNLICENSED\"},\"src/interfaces/IStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface IStakingStrategy {\\n    function deposit(uint256 amount) external payable;\\n    function withdraw(uint256 amount) external returns (uint256 withdrawnAmount);\\n    function ownerDeposit(uint256 amount) external payable;\\n    function ownerWithdraw(uint256 amount) external returns (uint256 withdrawnAmount);\\n    function setStakingManager(address _stakingManager) external;\\n    function setAutoStake(bool _autoStake) external;\\n\\n    function underlyingAssetAmount() external view returns (uint256);\\n    function autoStake() external view returns (bool);\\n    function stakingManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc897a24578e1120a56d4b5888ed7b2f491a99fc250dc6fa149a1ddac2b6be311\",\"license\":\"UNLICENSED\"},\"src/interfaces/IWithdrawalQueueERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\n/// @notice output format struct for `_getWithdrawalStatus()` mEthod\\nstruct WithdrawalRequestStatus {\\n    /// @notice stEth token amount that was locked on withdrawal queue for this request\\n    uint256 amountOfStEth;\\n    /// @notice amount of stEth shares locked on withdrawal queue for this request\\n    uint256 amountOfShares;\\n    /// @notice address that can claim or transfer this request\\n    address owner;\\n    /// @notice timestamp of when the request was created, in seconds\\n    uint256 timestamp;\\n    /// @notice true, if request is finalized\\n    bool isFinalized;\\n    /// @notice true, if request is claimed. Request is claimable if (isFinalized && !isClaimed)\\n    bool isClaimed;\\n}\\n\\ninterface IWithdrawalQueueERC721 {\\n    function claimWithdrawals(uint256[] calldata _requestIds, uint256[] calldata _hints) external;\\n    function findCheckpointHints(\\n        uint256[] calldata _requestIds,\\n        uint256 _firstIndex,\\n        uint256 _lastIndex\\n    )\\n        external\\n        view\\n        returns (uint256[] memory hintIds);\\n    function finalize(uint256 _lastRequestIdToBeFinalized, uint256 _maxShareRate) external payable;\\n    function getLastCheckpointIndex() external view returns (uint256);\\n    function getWithdrawalStatus(uint256[] calldata _requestIds)\\n        external\\n        view\\n        returns (WithdrawalRequestStatus[] memory statuses);\\n    function requestWithdrawals(\\n        uint256[] calldata _amounts,\\n        address _owner\\n    )\\n        external\\n        returns (uint256[] memory requestIds);\\n}\\n\",\"keccak256\":\"0x7c74a423ce0ca9f81e1ce452d9d401e58b27681448ce4a71aaea049e4e772ed9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161242861003e60003960008181610faf01528181610fd9015261112601526124286000f3fe608060405260043610620001085760003560e01c80631b9a91a4146200016857806322828cc2146200018d5780632bb33bbe14620001c75780634f1ef28614620001ec57806352d1902d1462000203578063555a23bb146200022a57806368ca883a146200024f5780636cf510da1462000271578063715018a6146200029357806379ba509714620002ab5780638aba131714620002c35780638da5cb5b14620002f0578063ad3cb1cc1462000308578063ad9d4ba3146200034a578063bb7ea0191462000361578063c057e2491462000386578063c0c53b8b14620003ab578063e30c397814620003d0578063e322921114620003e8578063f2fde38b146200040f57600080fd5b3662000163576003546001600160a01b0316330362000156576040513481527ffd11153dfaefca3a3390f4fe5048ca2682995d45d7d0fddbb072a279f18725dd9060200160405180910390a1005b620001613362000434565b005b600080fd5b3480156200017557600080fd5b506200016162000187366004620014d8565b62000573565b3480156200019a57600080fd5b50600354620001af906001600160a01b031681565b604051620001be919062001507565b60405180910390f35b348015620001d457600080fd5b5062000161620001e6366004620014d8565b6200070d565b62000161620001fd36600462001531565b62000944565b3480156200021057600080fd5b506200021b62000969565b604051908152602001620001be565b3480156200023757600080fd5b5062000161620002493660046200160f565b62000989565b3480156200025c57600080fd5b50600154620001af906001600160a01b031681565b3480156200027e57600080fd5b50600254620001af906001600160a01b031681565b348015620002a057600080fd5b5062000161620009db565b348015620002b857600080fd5b5062000161620009f3565b348015620002d057600080fd5b50600054620002df9060ff1681565b6040519015158152602001620001be565b348015620002fd57600080fd5b50620001af62000a39565b3480156200031557600080fd5b506200033b604051806040016040528060058152602001640352e302e360dc1b81525081565b604051620001be919062001683565b620001616200035b36600462001698565b62000434565b3480156200036e57600080fd5b50620001616200038036600462001698565b62000a56565b3480156200039357600080fd5b5062000161620003a536600462001698565b62000aad565b348015620003b857600080fd5b5062000161620003ca366004620016b8565b62000b09565b348015620003dd57600080fd5b50620001af62000d16565b348015620003f557600080fd5b50600054620001af9061010090046001600160a01b031681565b3480156200041c57600080fd5b50620001616200042e36600462001698565b62000d23565b3462000441828262000d9a565b6003546040805163539a783760e11b815290516001600160a01b039092169163adc9772e918491849163a734f06e9160048083019260209291908290030181865afa15801562000495573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004bb91906200170a565b846040518463ffffffff1660e01b8152600401620004db9291906200172a565b6000604051808303818588803b158015620004f557600080fd5b505af11580156200050a573d6000803e3d6000fd5b50506001546200052993506001600160a01b0316915083905062000e46565b604080513481526020810183905233916001600160a01b038516917f5e7e61836e7aac688d4f66257806e3118cc7a380422ee384512b7812e53cd1aa910160405180910390a35050565b600154604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90620005a790339085906004016200172a565b600060405180830381600087803b158015620005c257600080fd5b505af1158015620005d7573d6000803e3d6000fd5b5050600354604051632e1a7d4d60e01b8152600481018590526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b1580156200062257600080fd5b505af115801562000637573d6000803e3d6000fd5b50505050600080836001600160a01b03168360405160006040518083038185875af1925050503d80600081146200068b576040519150601f19603f3d011682016040523d82523d6000602084013e62000690565b606091505b509150915081620006c15780604051639a367e1760e01b8152600401620006b8919062001683565b60405180910390fd5b60408051848152602081018590526001600160a01b0386169133917f98dd409e09cadcfcca8697e6c594347ba2afdf87aa0ecb9281ce09ea76081ad1910160405180910390a350505050565b6200071762000f6d565b600154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801562000762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000788919062001743565b6003546040805163539a783760e11b815290516001600160a01b039092169163b241908391839163a734f06e916004808201926020929091908290030181865afa158015620007db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080191906200170a565b6040518263ffffffff1660e01b81526004016200081f919062001507565b602060405180830381865afa1580156200083d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000863919062001743565b6200086f91906200175d565b9050818110156200089357604051633ce95f8560e11b815260040160405180910390fd5b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990620008c790869086906004016200172a565b600060405180830381600087803b158015620008e257600080fd5b505af1158015620008f7573d6000803e3d6000fd5b50505050826001600160a01b03167f9c8e207d198ed50e04d0d89e27ec60af229e8a19f25b8efce8dbe4cfa0e56338836040516200093791815260200190565b60405180910390a2505050565b6200094e62000fa4565b62000959826200104d565b62000965828262001057565b5050565b6000620009756200111b565b50600080516020620023d383398151915290565b6200099362000f6d565b6000805460ff19168215159081179091556040519081527f215a7d64fb51bebc34020eacfcbd22580622c6148ad085a557d7b3c4b850372c906020015b60405180910390a150565b620009e562000f6d565b620009f1600062001165565b565b3380620009ff62000d16565b6001600160a01b03161462000a2b578060405163118cdaa760e01b8152600401620006b8919062001507565b62000a368162001165565b50565b60008062000a466200118c565b546001600160a01b031692915050565b62000a6062000f6d565b600280546001600160a01b0319166001600160a01b0383161790556040517f6bd18dd71dbbe09ce1c748bd59a9d3578fd72f868be620e941baaf7ededc1b2c90620009d090839062001507565b62000ab762000f6d565b60008054610100600160a81b0319166101006001600160a01b038416021790556040517fef378cd64aa039f8aa85e2d1348e2d05fc857350febd6741215907a7176da26b90620009d090839062001507565b600062000b15620011b0565b805490915060ff600160401b82041615906001600160401b031660008115801562000b3d5750825b90506000826001600160401b0316600114801562000b5a5750303b155b90508115801562000b69575080155b1562000b885760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831562000bb257845460ff60401b1916600160401b1785555b6001600160a01b038716158062000bd057506001600160a01b038816155b1562000bef5760405163d92e233d60e01b815260040160405180910390fd5b3060405162000bfe90620014b4565b6001600160a01b0390911681526060602082018190526014908201527308ac8cecad8cae6e640aee4c2e0e0cac8408ae8d60631b608082015260a060408201819052600590820152640caee8ae8d60db1b60c082015260e001604051809103906000f08015801562000c74573d6000803e3d6000fd5b50600180546001600160a01b03199081166001600160a01b03938416179091556002805482168a84161790556000805460ff191690556003805490911691881691909117905562000cc588620011d4565b831562000d0c57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b60008062000a466200120b565b62000d2d62000f6d565b600062000d396200120b565b80546001600160a01b0319166001600160a01b038416908117825590915062000d6162000a39565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b60005460ff161562000e12576001546040516340c10f1960e01b81526001600160a01b03909116906340c10f199062000dda90309085906004016200172a565b600060405180830381600087803b15801562000df557600080fd5b505af115801562000e0a573d6000803e3d6000fd5b505050505050565b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f199062000dda90859085906004016200172a565b60005460ff1615620009655760025460405163095ea7b360e01b81526001600160a01b038481169263095ea7b39262000e88929091169085906004016200172a565b6020604051808303816000875af115801562000ea8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ece91906200177f565b5060025460405163b79092fd60e01b8152600481018390526001600160a01b039091169063b79092fd90602401600060405180830381600087803b15801562000f1657600080fd5b505af115801562000f2b573d6000803e3d6000fd5b505050507ff757bc1e2b5ba9110835e1e6c910465e1216e91ac166f34b44e02b78e6a785398160405162000f6191815260200190565b60405180910390a15050565b3362000f7862000a39565b6001600160a01b031614620009f1573360405163118cdaa760e01b8152600401620006b8919062001507565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806200102e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662001022600080516020620023d3833981519152546001600160a01b031690565b6001600160a01b031614155b15620009f15760405163703e46dd60e11b815260040160405180910390fd5b62000a3662000f6d565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015620010b4575060408051601f3d908101601f19168201909252620010b19181019062001743565b60015b620010d65781604051634c9c8ce360e01b8152600401620006b8919062001507565b600080516020620023d383398151915281146200110a57604051632a87526960e21b815260048101829052602401620006b8565b6200111683836200122f565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009f15760405163703e46dd60e11b815260040160405180910390fd5b6000620011716200120b565b80546001600160a01b0319168155905062000965826200128c565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b620011de620012ea565b6001600160a01b03811662000a2b576000604051631e4fbdf760e01b8152600401620006b8919062001507565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0090565b6200123a8262001312565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115620012825762001116828262001372565b62000965620013f0565b6000620012986200118c565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b620012f462001410565b620009f157604051631afcd79f60e31b815260040160405180910390fd5b806001600160a01b03163b600003620013425780604051634c9c8ce360e01b8152600401620006b8919062001507565b600080516020620023d383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516200139191906200179f565b600060405180830381855af49150503d8060008114620013ce576040519150601f19603f3d011682016040523d82523d6000602084013e620013d3565b606091505b5091509150620013e58583836200142c565b925050505b92915050565b3415620009f15760405163b398979f60e01b815260040160405180910390fd5b60006200141c620011b0565b54600160401b900460ff16919050565b60608262001445576200143f826200148a565b62001483565b81511580156200145d57506001600160a01b0384163b155b15620014805783604051639996b31560e01b8152600401620006b8919062001507565b50805b9392505050565b8051156200149b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b610c1580620017be83390190565b6001600160a01b038116811462000a3657600080fd5b60008060408385031215620014ec57600080fd5b8235620014f981620014c2565b946020939093013593505050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200154557600080fd5b82356200155281620014c2565b915060208301356001600160401b03808211156200156f57600080fd5b818501915085601f8301126200158457600080fd5b8135818111156200159957620015996200151b565b604051601f8201601f19908116603f01168101908382118183101715620015c457620015c46200151b565b81604052828152886020848701011115620015de57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b801515811462000a3657600080fd5b6000602082840312156200162257600080fd5b8135620014838162001600565b60005b838110156200164c57818101518382015260200162001632565b50506000910152565b600081518084526200166f8160208601602086016200162f565b601f01601f19169290920160200192915050565b60208152600062001483602083018462001655565b600060208284031215620016ab57600080fd5b81356200148381620014c2565b600080600060608486031215620016ce57600080fd5b8335620016db81620014c2565b92506020840135620016ed81620014c2565b91506040840135620016ff81620014c2565b809150509250925092565b6000602082840312156200171d57600080fd5b81516200148381620014c2565b6001600160a01b03929092168252602082015260400190565b6000602082840312156200175657600080fd5b5051919050565b81810381811115620013ea57634e487b7160e01b600052601160045260246000fd5b6000602082840312156200179257600080fd5b8151620014838162001600565b60008251620017b38184602087016200162f565b919091019291505056fe60806040523480156200001157600080fd5b5060405162000c1538038062000c15833981016040819052620000349162000148565b8181600362000044838262000263565b50600462000053828262000263565b5050600580546001600160a01b0319166001600160a01b039590951694909417909355506200032f915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000a857600080fd5b81516001600160401b0380821115620000c557620000c562000080565b604051601f8301601f19908116603f01168101908282118183101715620000f057620000f062000080565b81604052838152602092508660208588010111156200010e57600080fd5b600091505b8382101562000132578582018301518183018401529082019062000113565b6000602085830101528094505050505092915050565b6000806000606084860312156200015e57600080fd5b83516001600160a01b03811681146200017657600080fd5b60208501519093506001600160401b03808211156200019457600080fd5b620001a28783880162000096565b93506040860151915080821115620001b957600080fd5b50620001c88682870162000096565b9150509250925092565b600181811c90821680620001e757607f821691505b6020821081036200020857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025e576000816000526020600020601f850160051c81016020861015620002395750805b601f850160051c820191505b818110156200025a5782815560010162000245565b5050505b505050565b81516001600160401b038111156200027f576200027f62000080565b6200029781620002908454620001d2565b846200020e565b602080601f831160018114620002cf5760008415620002b65750858301515b600019600386901b1c1916600185901b1785556200025a565b600085815260208120601f198616915b828110156200030057888601518255948401946001909101908401620002df565b50858210156200031f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108d6806200033f6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c806306fdde03146100a957806307546172146100c7578063095ea7b3146100e757806318160ddd1461010a57806323b872dd1461011c578063313ce5671461012f57806340c10f191461013e57806370a082311461015357806395d89b411461017c5780639dc29fac14610184578063a9059cbb14610197578063dd62ed3e146101aa575b600080fd5b6100b16101bd565b6040516100be91906106ea565b60405180910390f35b6005546100da906001600160a01b031681565b6040516100be9190610739565b6100fa6100f5366004610769565b61024f565b60405190151581526020016100be565b6002545b6040519081526020016100be565b6100fa61012a366004610793565b610269565b604051601281526020016100be565b61015161014c366004610769565b61028d565b005b61010e6101613660046107cf565b6001600160a01b031660009081526020819052604090205490565b6100b1610309565b610151610192366004610769565b610318565b6100fa6101a5366004610769565b610388565b61010e6101b83660046107f1565b610396565b6060600380546101cc90610824565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610824565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b60003361025d8185856103c1565b60019150505b92915050565b6000336102778582856103d3565b61028285858561042f565b506001949350505050565b6005546001600160a01b031633146102b85760405163469d9d3360e01b815260040160405180910390fd5b6102c2828261048e565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040516102fd91815260200190565b60405180910390a25050565b6060600480546101cc90610824565b6005546001600160a01b031633146103435760405163469d9d3360e01b815260040160405180910390fd5b61034d82826104c8565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516102fd91815260200190565b60003361025d81858561042f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103ce83838360016104fe565b505050565b60006103df8484610396565b90506000198114610429578181101561041a57828183604051637dc7a0d960e11b81526004016104119392919061085e565b60405180910390fd5b610429848484840360006104fe565b50505050565b6001600160a01b038316610459576000604051634b637e8f60e11b81526004016104119190610739565b6001600160a01b03821661048357600060405163ec442f0560e01b81526004016104119190610739565b6103ce8383836105d3565b6001600160a01b0382166104b857600060405163ec442f0560e01b81526004016104119190610739565b6104c4600083836105d3565b5050565b6001600160a01b0382166104f2576000604051634b637e8f60e11b81526004016104119190610739565b6104c4826000836105d3565b6001600160a01b03841661052857600060405163e602df0560e01b81526004016104119190610739565b6001600160a01b038316610552576000604051634a1406b160e11b81526004016104119190610739565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561042957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105c591815260200190565b60405180910390a350505050565b6001600160a01b0383166105fe5780600260008282546105f3919061087f565b9091555061065d9050565b6001600160a01b0383166000908152602081905260409020548181101561063e5783818360405163391434e360e21b81526004016104119392919061085e565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661067957600280548290039055610698565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106dd91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b81811015610718578581018301518582016040015282016106fc565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461076457600080fd5b919050565b6000806040838503121561077c57600080fd5b6107858361074d565b946020939093013593505050565b6000806000606084860312156107a857600080fd5b6107b18461074d565b92506107bf6020850161074d565b9150604084013590509250925092565b6000602082840312156107e157600080fd5b6107ea8261074d565b9392505050565b6000806040838503121561080457600080fd5b61080d8361074d565b915061081b6020840161074d565b90509250929050565b600181811c9082168061083857607f821691505b60208210810361085857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b039390931683526020830191909152604082015260600190565b8082018082111561026357634e487b7160e01b600052601160045260246000fdfea2646970667358221220d72cfe5069cbefba716ca93aa03fc0a5c90d2eca250cd42e9851009b7bb6802664736f6c63430008170033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212209014ba687249542fc1a1ec892594d4858421a758e94509958f8ec772e8de500064736f6c63430008170033",
  "deployedBytecode": "0x608060405260043610620001085760003560e01c80631b9a91a4146200016857806322828cc2146200018d5780632bb33bbe14620001c75780634f1ef28614620001ec57806352d1902d1462000203578063555a23bb146200022a57806368ca883a146200024f5780636cf510da1462000271578063715018a6146200029357806379ba509714620002ab5780638aba131714620002c35780638da5cb5b14620002f0578063ad3cb1cc1462000308578063ad9d4ba3146200034a578063bb7ea0191462000361578063c057e2491462000386578063c0c53b8b14620003ab578063e30c397814620003d0578063e322921114620003e8578063f2fde38b146200040f57600080fd5b3662000163576003546001600160a01b0316330362000156576040513481527ffd11153dfaefca3a3390f4fe5048ca2682995d45d7d0fddbb072a279f18725dd9060200160405180910390a1005b620001613362000434565b005b600080fd5b3480156200017557600080fd5b506200016162000187366004620014d8565b62000573565b3480156200019a57600080fd5b50600354620001af906001600160a01b031681565b604051620001be919062001507565b60405180910390f35b348015620001d457600080fd5b5062000161620001e6366004620014d8565b6200070d565b62000161620001fd36600462001531565b62000944565b3480156200021057600080fd5b506200021b62000969565b604051908152602001620001be565b3480156200023757600080fd5b5062000161620002493660046200160f565b62000989565b3480156200025c57600080fd5b50600154620001af906001600160a01b031681565b3480156200027e57600080fd5b50600254620001af906001600160a01b031681565b348015620002a057600080fd5b5062000161620009db565b348015620002b857600080fd5b5062000161620009f3565b348015620002d057600080fd5b50600054620002df9060ff1681565b6040519015158152602001620001be565b348015620002fd57600080fd5b50620001af62000a39565b3480156200031557600080fd5b506200033b604051806040016040528060058152602001640352e302e360dc1b81525081565b604051620001be919062001683565b620001616200035b36600462001698565b62000434565b3480156200036e57600080fd5b50620001616200038036600462001698565b62000a56565b3480156200039357600080fd5b5062000161620003a536600462001698565b62000aad565b348015620003b857600080fd5b5062000161620003ca366004620016b8565b62000b09565b348015620003dd57600080fd5b50620001af62000d16565b348015620003f557600080fd5b50600054620001af9061010090046001600160a01b031681565b3480156200041c57600080fd5b50620001616200042e36600462001698565b62000d23565b3462000441828262000d9a565b6003546040805163539a783760e11b815290516001600160a01b039092169163adc9772e918491849163a734f06e9160048083019260209291908290030181865afa15801562000495573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004bb91906200170a565b846040518463ffffffff1660e01b8152600401620004db9291906200172a565b6000604051808303818588803b158015620004f557600080fd5b505af11580156200050a573d6000803e3d6000fd5b50506001546200052993506001600160a01b0316915083905062000e46565b604080513481526020810183905233916001600160a01b038516917f5e7e61836e7aac688d4f66257806e3118cc7a380422ee384512b7812e53cd1aa910160405180910390a35050565b600154604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90620005a790339085906004016200172a565b600060405180830381600087803b158015620005c257600080fd5b505af1158015620005d7573d6000803e3d6000fd5b5050600354604051632e1a7d4d60e01b8152600481018590526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b1580156200062257600080fd5b505af115801562000637573d6000803e3d6000fd5b50505050600080836001600160a01b03168360405160006040518083038185875af1925050503d80600081146200068b576040519150601f19603f3d011682016040523d82523d6000602084013e62000690565b606091505b509150915081620006c15780604051639a367e1760e01b8152600401620006b8919062001683565b60405180910390fd5b60408051848152602081018590526001600160a01b0386169133917f98dd409e09cadcfcca8697e6c594347ba2afdf87aa0ecb9281ce09ea76081ad1910160405180910390a350505050565b6200071762000f6d565b600154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801562000762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000788919062001743565b6003546040805163539a783760e11b815290516001600160a01b039092169163b241908391839163a734f06e916004808201926020929091908290030181865afa158015620007db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080191906200170a565b6040518263ffffffff1660e01b81526004016200081f919062001507565b602060405180830381865afa1580156200083d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000863919062001743565b6200086f91906200175d565b9050818110156200089357604051633ce95f8560e11b815260040160405180910390fd5b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990620008c790869086906004016200172a565b600060405180830381600087803b158015620008e257600080fd5b505af1158015620008f7573d6000803e3d6000fd5b50505050826001600160a01b03167f9c8e207d198ed50e04d0d89e27ec60af229e8a19f25b8efce8dbe4cfa0e56338836040516200093791815260200190565b60405180910390a2505050565b6200094e62000fa4565b62000959826200104d565b62000965828262001057565b5050565b6000620009756200111b565b50600080516020620023d383398151915290565b6200099362000f6d565b6000805460ff19168215159081179091556040519081527f215a7d64fb51bebc34020eacfcbd22580622c6148ad085a557d7b3c4b850372c906020015b60405180910390a150565b620009e562000f6d565b620009f1600062001165565b565b3380620009ff62000d16565b6001600160a01b03161462000a2b578060405163118cdaa760e01b8152600401620006b8919062001507565b62000a368162001165565b50565b60008062000a466200118c565b546001600160a01b031692915050565b62000a6062000f6d565b600280546001600160a01b0319166001600160a01b0383161790556040517f6bd18dd71dbbe09ce1c748bd59a9d3578fd72f868be620e941baaf7ededc1b2c90620009d090839062001507565b62000ab762000f6d565b60008054610100600160a81b0319166101006001600160a01b038416021790556040517fef378cd64aa039f8aa85e2d1348e2d05fc857350febd6741215907a7176da26b90620009d090839062001507565b600062000b15620011b0565b805490915060ff600160401b82041615906001600160401b031660008115801562000b3d5750825b90506000826001600160401b0316600114801562000b5a5750303b155b90508115801562000b69575080155b1562000b885760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831562000bb257845460ff60401b1916600160401b1785555b6001600160a01b038716158062000bd057506001600160a01b038816155b1562000bef5760405163d92e233d60e01b815260040160405180910390fd5b3060405162000bfe90620014b4565b6001600160a01b0390911681526060602082018190526014908201527308ac8cecad8cae6e640aee4c2e0e0cac8408ae8d60631b608082015260a060408201819052600590820152640caee8ae8d60db1b60c082015260e001604051809103906000f08015801562000c74573d6000803e3d6000fd5b50600180546001600160a01b03199081166001600160a01b03938416179091556002805482168a84161790556000805460ff191690556003805490911691881691909117905562000cc588620011d4565b831562000d0c57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b60008062000a466200120b565b62000d2d62000f6d565b600062000d396200120b565b80546001600160a01b0319166001600160a01b038416908117825590915062000d6162000a39565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b60005460ff161562000e12576001546040516340c10f1960e01b81526001600160a01b03909116906340c10f199062000dda90309085906004016200172a565b600060405180830381600087803b15801562000df557600080fd5b505af115801562000e0a573d6000803e3d6000fd5b505050505050565b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f199062000dda90859085906004016200172a565b60005460ff1615620009655760025460405163095ea7b360e01b81526001600160a01b038481169263095ea7b39262000e88929091169085906004016200172a565b6020604051808303816000875af115801562000ea8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ece91906200177f565b5060025460405163b79092fd60e01b8152600481018390526001600160a01b039091169063b79092fd90602401600060405180830381600087803b15801562000f1657600080fd5b505af115801562000f2b573d6000803e3d6000fd5b505050507ff757bc1e2b5ba9110835e1e6c910465e1216e91ac166f34b44e02b78e6a785398160405162000f6191815260200190565b60405180910390a15050565b3362000f7862000a39565b6001600160a01b031614620009f1573360405163118cdaa760e01b8152600401620006b8919062001507565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806200102e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662001022600080516020620023d3833981519152546001600160a01b031690565b6001600160a01b031614155b15620009f15760405163703e46dd60e11b815260040160405180910390fd5b62000a3662000f6d565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015620010b4575060408051601f3d908101601f19168201909252620010b19181019062001743565b60015b620010d65781604051634c9c8ce360e01b8152600401620006b8919062001507565b600080516020620023d383398151915281146200110a57604051632a87526960e21b815260048101829052602401620006b8565b6200111683836200122f565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009f15760405163703e46dd60e11b815260040160405180910390fd5b6000620011716200120b565b80546001600160a01b0319168155905062000965826200128c565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b620011de620012ea565b6001600160a01b03811662000a2b576000604051631e4fbdf760e01b8152600401620006b8919062001507565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0090565b6200123a8262001312565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115620012825762001116828262001372565b62000965620013f0565b6000620012986200118c565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b620012f462001410565b620009f157604051631afcd79f60e31b815260040160405180910390fd5b806001600160a01b03163b600003620013425780604051634c9c8ce360e01b8152600401620006b8919062001507565b600080516020620023d383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516200139191906200179f565b600060405180830381855af49150503d8060008114620013ce576040519150601f19603f3d011682016040523d82523d6000602084013e620013d3565b606091505b5091509150620013e58583836200142c565b925050505b92915050565b3415620009f15760405163b398979f60e01b815260040160405180910390fd5b60006200141c620011b0565b54600160401b900460ff16919050565b60608262001445576200143f826200148a565b62001483565b81511580156200145d57506001600160a01b0384163b155b15620014805783604051639996b31560e01b8152600401620006b8919062001507565b50805b9392505050565b8051156200149b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b610c1580620017be83390190565b6001600160a01b038116811462000a3657600080fd5b60008060408385031215620014ec57600080fd5b8235620014f981620014c2565b946020939093013593505050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200154557600080fd5b82356200155281620014c2565b915060208301356001600160401b03808211156200156f57600080fd5b818501915085601f8301126200158457600080fd5b8135818111156200159957620015996200151b565b604051601f8201601f19908116603f01168101908382118183101715620015c457620015c46200151b565b81604052828152886020848701011115620015de57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b801515811462000a3657600080fd5b6000602082840312156200162257600080fd5b8135620014838162001600565b60005b838110156200164c57818101518382015260200162001632565b50506000910152565b600081518084526200166f8160208601602086016200162f565b601f01601f19169290920160200192915050565b60208152600062001483602083018462001655565b600060208284031215620016ab57600080fd5b81356200148381620014c2565b600080600060608486031215620016ce57600080fd5b8335620016db81620014c2565b92506020840135620016ed81620014c2565b91506040840135620016ff81620014c2565b809150509250925092565b6000602082840312156200171d57600080fd5b81516200148381620014c2565b6001600160a01b03929092168252602082015260400190565b6000602082840312156200175657600080fd5b5051919050565b81810381811115620013ea57634e487b7160e01b600052601160045260246000fd5b6000602082840312156200179257600080fd5b8151620014838162001600565b60008251620017b38184602087016200162f565b919091019291505056fe60806040523480156200001157600080fd5b5060405162000c1538038062000c15833981016040819052620000349162000148565b8181600362000044838262000263565b50600462000053828262000263565b5050600580546001600160a01b0319166001600160a01b039590951694909417909355506200032f915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000a857600080fd5b81516001600160401b0380821115620000c557620000c562000080565b604051601f8301601f19908116603f01168101908282118183101715620000f057620000f062000080565b81604052838152602092508660208588010111156200010e57600080fd5b600091505b8382101562000132578582018301518183018401529082019062000113565b6000602085830101528094505050505092915050565b6000806000606084860312156200015e57600080fd5b83516001600160a01b03811681146200017657600080fd5b60208501519093506001600160401b03808211156200019457600080fd5b620001a28783880162000096565b93506040860151915080821115620001b957600080fd5b50620001c88682870162000096565b9150509250925092565b600181811c90821680620001e757607f821691505b6020821081036200020857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025e576000816000526020600020601f850160051c81016020861015620002395750805b601f850160051c820191505b818110156200025a5782815560010162000245565b5050505b505050565b81516001600160401b038111156200027f576200027f62000080565b6200029781620002908454620001d2565b846200020e565b602080601f831160018114620002cf5760008415620002b65750858301515b600019600386901b1c1916600185901b1785556200025a565b600085815260208120601f198616915b828110156200030057888601518255948401946001909101908401620002df565b50858210156200031f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108d6806200033f6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c806306fdde03146100a957806307546172146100c7578063095ea7b3146100e757806318160ddd1461010a57806323b872dd1461011c578063313ce5671461012f57806340c10f191461013e57806370a082311461015357806395d89b411461017c5780639dc29fac14610184578063a9059cbb14610197578063dd62ed3e146101aa575b600080fd5b6100b16101bd565b6040516100be91906106ea565b60405180910390f35b6005546100da906001600160a01b031681565b6040516100be9190610739565b6100fa6100f5366004610769565b61024f565b60405190151581526020016100be565b6002545b6040519081526020016100be565b6100fa61012a366004610793565b610269565b604051601281526020016100be565b61015161014c366004610769565b61028d565b005b61010e6101613660046107cf565b6001600160a01b031660009081526020819052604090205490565b6100b1610309565b610151610192366004610769565b610318565b6100fa6101a5366004610769565b610388565b61010e6101b83660046107f1565b610396565b6060600380546101cc90610824565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610824565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b60003361025d8185856103c1565b60019150505b92915050565b6000336102778582856103d3565b61028285858561042f565b506001949350505050565b6005546001600160a01b031633146102b85760405163469d9d3360e01b815260040160405180910390fd5b6102c2828261048e565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040516102fd91815260200190565b60405180910390a25050565b6060600480546101cc90610824565b6005546001600160a01b031633146103435760405163469d9d3360e01b815260040160405180910390fd5b61034d82826104c8565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516102fd91815260200190565b60003361025d81858561042f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103ce83838360016104fe565b505050565b60006103df8484610396565b90506000198114610429578181101561041a57828183604051637dc7a0d960e11b81526004016104119392919061085e565b60405180910390fd5b610429848484840360006104fe565b50505050565b6001600160a01b038316610459576000604051634b637e8f60e11b81526004016104119190610739565b6001600160a01b03821661048357600060405163ec442f0560e01b81526004016104119190610739565b6103ce8383836105d3565b6001600160a01b0382166104b857600060405163ec442f0560e01b81526004016104119190610739565b6104c4600083836105d3565b5050565b6001600160a01b0382166104f2576000604051634b637e8f60e11b81526004016104119190610739565b6104c4826000836105d3565b6001600160a01b03841661052857600060405163e602df0560e01b81526004016104119190610739565b6001600160a01b038316610552576000604051634a1406b160e11b81526004016104119190610739565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561042957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105c591815260200190565b60405180910390a350505050565b6001600160a01b0383166105fe5780600260008282546105f3919061087f565b9091555061065d9050565b6001600160a01b0383166000908152602081905260409020548181101561063e5783818360405163391434e360e21b81526004016104119392919061085e565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661067957600280548290039055610698565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106dd91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b81811015610718578581018301518582016040015282016106fc565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461076457600080fd5b919050565b6000806040838503121561077c57600080fd5b6107858361074d565b946020939093013593505050565b6000806000606084860312156107a857600080fd5b6107b18461074d565b92506107bf6020850161074d565b9150604084013590509250925092565b6000602082840312156107e157600080fd5b6107ea8261074d565b9392505050565b6000806040838503121561080457600080fd5b61080d8361074d565b915061081b6020840161074d565b90509250929050565b600181811c9082168061083857607f821691505b60208210810361085857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b039390931683526020830191909152604082015260600190565b8082018082111561026357634e487b7160e01b600052601160045260246000fdfea2646970667358221220d72cfe5069cbefba716ca93aa03fc0a5c90d2eca250cd42e9851009b7bb6802664736f6c63430008170033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212209014ba687249542fc1a1ec892594d4858421a758e94509958f8ec772e8de500064736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "depositEth(address)": {
        "params": {
          "to": "Address to mint wrapped tokens to"
        }
      },
      "mintEthBasedOnStakedAmount(address,uint256)": {
        "details": "The owner can only mint up to the amount of Eth deposited + Eth staking rewards from Lido",
        "params": {
          "amount": "Amount of wrapped tokens to mint",
          "to": "Address to mint wrapped tokens to"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAutoBridge(bool)": {
        "params": {
          "_autoBridge": "True to pause autobridging, false to unpause"
        }
      },
      "setL1StandardBridge(address)": {
        "params": {
          "_l1standardBridge": "Address of the L1StandardBridge contract"
        }
      },
      "setL2Eth(address)": {
        "params": {
          "_l2Eth": "Address of the L2 Wrapped Eth contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawEth(address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "to": "Address to withdraw Eth to"
        }
      }
    },
    "title": "EdgelessDeposit",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositEth(address)": {
        "notice": "Deposit Eth, mint wrapped tokens, and bridge to the Edgeless L2"
      },
      "mintEthBasedOnStakedAmount(address,uint256)": {
        "notice": "Mint wrapped tokens based on the amount of Eth staked"
      },
      "setAutoBridge(bool)": {
        "notice": "Pause autobridging of wrapped tokens to the Edgeless L2"
      },
      "setL1StandardBridge(address)": {
        "notice": "Set the address of the L1StandardBridge contract"
      },
      "setL2Eth(address)": {
        "notice": "Set the address of the L2 Wrapped Eth contract"
      },
      "withdrawEth(address,uint256)": {
        "notice": "Withdraw Eth from the Eth pool"
      }
    },
    "notice": "EdgelessDeposit is a contract that allows users to deposit Eth and receive wrapped tokens in return. The wrapped tokens can be used to bridge to the Edgeless L2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2730,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "autoBridge",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2732,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "l2Eth",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2735,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "wrappedEth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(WrappedToken)3722"
      },
      {
        "astId": 2738,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "l1standardBridge",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20Inbox)3730"
      },
      {
        "astId": 2741,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "stakingManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(StakingManager)3625"
      },
      {
        "astId": 2745,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Inbox)3730": {
        "encoding": "inplace",
        "label": "contract IERC20Inbox",
        "numberOfBytes": "20"
      },
      "t_contract(StakingManager)3625": {
        "encoding": "inplace",
        "label": "contract StakingManager",
        "numberOfBytes": "20"
      },
      "t_contract(WrappedToken)3722": {
        "encoding": "inplace",
        "label": "contract WrappedToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}